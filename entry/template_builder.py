import pathlib
import json
import os
import math
from zipfile import ZipFile

import tkinter as tk
from tkinter import font,messagebox


root = tk.Tk()
root.title("Template Builder")
root_width = root.winfo_reqwidth()
root_height = root.winfo_reqheight()
position_horizontal = int(root.winfo_screenwidth()/2 - root_width/2)
position_vertical = int(root.winfo_screenheight()/2 - root_height/2)
root.geometry("+{}+{}".format(position_horizontal, position_vertical))

class TemplateBuilder():
    def __init__(self, root):
        self.root = root
        self.file_loc = 'entry\\bin\\template_library.json'
        catg_frame = tk.Frame(master=self.root)
        catg_frame.grid(row=0, column=0)
        self.input_frame = tk.Frame(master=self.root)
        self.input_frame.grid(row=1, column=0)
        self.send_it_frame = tk.Frame(master=self.root)
        self.send_it_frame.grid(row=2, column=0)
        btn_npc = tk.Button(master=catg_frame, command=lambda: self.build_form('npc'), text="Fast NPC")
        btn_npc.grid(row=0, column=0, sticky='w', padx=5, pady=10)
        btn_monster = tk.Button(master=catg_frame, command=lambda: self.build_form('monster'), text="Monster")
        btn_monster.grid(row=0, column=1, sticky='w', padx=5, pady=10)
        lbl_waiting = tk.Label(master=self.input_frame, text="Waiting...").grid(row=0, column=0)

    def build_form(self, catg):
        try:
            old_widg = self.input_frame.grid_slaves()
            if old_widg is not None:
                for widg in old_widg:
                    widg.destroy()
        except AttributeError:
            pass

        lbl_catg = tk.Label(master=self.input_frame, text="")
        lbl_catg.grid(row=0, column=0, sticky='w')
        underline_font = font.Font(lbl_catg, lbl_catg.cget("font"))
        underline_font.configure(underline = True)
        lbl_catg.config(font=underline_font)
        if catg == 'npc':
            lbl_catg.config(text='NPC')
        else:
            lbl_catg.config(text="Monster")
        lbl_name = tk.Label(master=self.input_frame, text="Name: ")
        lbl_name.grid(row=1, column=0, sticky='w')
        self.ent_name = tk.Entry(master=self.input_frame, width=20)
        self.ent_name.grid(row=1, column=1, sticky='w')
        lbl_type = tk.Label(master=self.input_frame, text="Type: ")
        lbl_type.grid(row=2, column=0, sticky='w')
        self.ent_type = tk.Entry(master=self.input_frame, width=20)
        self.ent_type.grid(row=2, column=1, sticky='w')
        lbl_size = tk.Label(master=self.input_frame, text="Size: ")
        lbl_size.grid(row=3, column=0, sticky='w')
        self.size = tk.StringVar()
        size_frame = tk.Frame(master=self.input_frame)
        size_frame.grid(row=3, column=1, sticky='w')
        rbn_tiny = tk.Radiobutton(master=size_frame, text="tiny", variable=self.size, value='tiny')
        rbn_tiny.grid(row=0, column=0, sticky='w')
        rbn_small = tk.Radiobutton(master=size_frame, text="small", variable=self.size, value='small')
        rbn_small.grid(row=0, column=1, sticky='w')
        rbn_medium = tk.Radiobutton(master=size_frame, text="medium", variable=self.size, value='medium')
        rbn_medium.grid(row=1, column=0, sticky='w')
        rbn_large = tk.Radiobutton(master=size_frame, text="large", variable=self.size, value='large')
        rbn_large.grid(row=1, column=1, sticky='w')
        rbn_huge = tk.Radiobutton(master=size_frame, text="huge", variable=self.size, value='huge')
        rbn_huge.grid(row=2, column=0, sticky='w')
        rbn_gargantuan = tk.Radiobutton(master=size_frame, text="garg", variable=self.size, value='gargantuan')
        rbn_gargantuan.grid(row=2, column=1, sticky='w')
        lbl_ac = tk.Label(master=self.input_frame, text="AC: ")
        lbl_ac.grid(row=4, column=0, sticky='w')
        self.ent_ac = tk.Entry(master=self.input_frame, width=20)
        self.ent_ac.grid(row=4, column=1, sticky='w')
        self.ent_ac.insert(0, "14")
        lbl_hp_avg = tk.Label(master=self.input_frame, text="Average HP")
        lbl_hp_avg.grid(row=5, column=0, sticky='w')
        self.ent_hp_avg = tk.Entry(master=self.input_frame, width=20)
        self.ent_hp_avg.grid(row=5, column=1, sticky='w')
        lbl_hp_dice = tk.Label(master=self.input_frame, text="HP Dice")
        lbl_hp_dice.grid(row=6, column=0, sticky='w')
        hp_dice_frame = tk.Frame(master=self.input_frame)
        hp_dice_frame.grid(row=6, column=1, sticky='w')
        self.ent_num_hp_dice = tk.Entry(master=hp_dice_frame, width=5)
        self.ent_num_hp_dice.grid(row=0, column=0, sticky='w')
        lbl_d = tk.Label(master=hp_dice_frame, text="d")
        lbl_d.grid(row=0, column=1, sticky='w', padx=2)
        self.ent_hp_die = tk.Entry(master=hp_dice_frame, width=5)
        self.ent_hp_die.grid(row=0, column=2, sticky='w')
        lbl_speed = tk.Label(master=self.input_frame, text="Speed: ")
        lbl_speed.grid(row=7, column=0, sticky='w')
        self.ent_speed = tk.Entry(master=self.input_frame, width=20)
        self.ent_speed.grid(row=7, column=1, sticky='w')
        self.ent_speed.insert(0, "30")
        lbl_stats = tk.Label(master=self.input_frame, text="Stats: ")
        lbl_stats.grid(row=8, column=0, sticky='w')
        stat_frame = tk.Frame(master=self.input_frame)
        stat_frame.grid(row=8, column=1)
        lbl_str = tk.Label(master=stat_frame, text="STR")
        lbl_str.grid(row=0, column=0)
        lbl_dex = tk.Label(master=stat_frame, text="DEX")
        lbl_dex.grid(row=0, column=1)
        lbl_con = tk.Label(master=stat_frame, text="CON")
        lbl_con.grid(row=0, column=2)
        self.ent_str = tk.Entry(master=stat_frame, width=5)
        self.ent_str.grid(row=1, column=0)
        self.ent_dex = tk.Entry(master=stat_frame, width=5)
        self.ent_dex.grid(row=1, column=1)
        self.ent_con = tk.Entry(master=stat_frame, width=5)
        self.ent_con.grid(row=1, column=2)
        lbl_int = tk.Label(master=stat_frame, text="INT")
        lbl_int.grid(row=2, column=0)
        lbl_wis = tk.Label(master=stat_frame, text="WIS")
        lbl_wis.grid(row=2, column=1)
        lbl_cha = tk.Label(master=stat_frame, text="CHA")
        lbl_cha.grid(row=2, column=2)
        self.ent_int = tk.Entry(master=stat_frame, width=5)
        self.ent_int.grid(row=3, column=0)
        self.ent_wis = tk.Entry(master=stat_frame, width=5)
        self.ent_wis.grid(row=3, column=1)
        self.ent_cha = tk.Entry(master=stat_frame, width=5)
        self.ent_cha.grid(row=3, column=2)

        lbl_skills = tk.Label(master=self.input_frame, text="Skills: ")
        lbl_skills.grid(row=1, column=2, sticky='w')
        lbl_skill_mod = tk.Label(master=self.input_frame, text="Modifier: ")
        lbl_skill_mod.grid(row=2, column=3, sticky='w')
        self.ent_skill_mod = tk.Entry(master=self.input_frame, width=5)
        self.ent_skill_mod.grid(row=2, column=4, sticky='w')
        self.ent_skill_mod.insert(0, "0")
        self.athletics = tk.IntVar()
        self.acrobatics = tk.IntVar()
        self.sleight_of_hand = tk.IntVar()
        self.stealth = tk.IntVar()
        self.arcana = tk.IntVar()
        self.history = tk.IntVar()
        self.investigation = tk.IntVar()
        self.nature = tk.IntVar()
        self.religion = tk.IntVar()
        self.animal_handling = tk.IntVar()
        self.insight = tk.IntVar()
        self.medicine = tk.IntVar()
        self.perception = tk.IntVar()
        self.survival = tk.IntVar()
        self.deception = tk.IntVar()
        self.intimidation = tk.IntVar()
        self.performance = tk.IntVar()
        self.persuasion = tk.IntVar()
        cbn_athletics = tk.Checkbutton(master=self.input_frame, text="Athletics", variable=self.athletics)
        cbn_acrobatics = tk.Checkbutton(master=self.input_frame, text="Acrobatics", variable=self.acrobatics)
        cbn_sleight_of_hand = tk.Checkbutton(master=self.input_frame, text="Sleight of Hand", variable=self.sleight_of_hand)
        cbn_stealth = tk.Checkbutton(master=self.input_frame, text="Stealth", variable=self.stealth)
        cbn_arcana = tk.Checkbutton(master=self.input_frame, text="Arcana", variable=self.arcana)
        cbn_history = tk.Checkbutton(master=self.input_frame, text="History", variable=self.history)
        cbn_investigation = tk.Checkbutton(master=self.input_frame, text="Investigation", variable=self.investigation)
        cbn_nature = tk.Checkbutton(master=self.input_frame, text="Nature", variable=self.nature)
        cbn_religion = tk.Checkbutton(master=self.input_frame, text="Religion", variable=self.religion)
        cbn_animal_handling = tk.Checkbutton(master=self.input_frame, text="Animal Handling", variable=self.animal_handling)
        cbn_insight = tk.Checkbutton(master=self.input_frame, text="Insight", variable=self.insight)
        cbn_medicine = tk.Checkbutton(master=self.input_frame, text="Medicine", variable=self.medicine)
        cbn_perception = tk.Checkbutton(master=self.input_frame, text="Perception", variable=self.perception)
        cbn_survival = tk.Checkbutton(master=self.input_frame, text="Survival", variable=self.survival)
        cbn_deception = tk.Checkbutton(master=self.input_frame, text="Deception", variable=self.deception)
        cbn_intimidation = tk.Checkbutton(master=self.input_frame, text="Intimidation", variable=self.intimidation)
        cbn_performance = tk.Checkbutton(master=self.input_frame, text="Performance", variable=self.performance)
        cbn_persuasion = tk.Checkbutton(master=self.input_frame, text="Persuasion", variable=self.persuasion)
        cbn_athletics.grid(row=3, column=3, sticky='w')
        cbn_acrobatics.grid(row=3, column=4, sticky='w')
        cbn_sleight_of_hand.grid(row=4, column=3, sticky='w')
        cbn_stealth.grid(row=4, column=4, sticky='w')
        cbn_arcana.grid(row=5, column=3, sticky='w')
        cbn_history.grid(row=5, column=4, sticky='w')
        cbn_investigation.grid(row=6, column=3, sticky='w')
        cbn_nature.grid(row=6, column=4, sticky='w')
        cbn_religion.grid(row=7, column=3, sticky='w')
        cbn_animal_handling.grid(row=7, column=4, sticky='w')
        cbn_insight.grid(row=8, column=3, sticky='w')
        cbn_medicine.grid(row=8, column=4, sticky='w')
        cbn_perception.grid(row=9, column=3, sticky='w')
        cbn_survival.grid(row=9, column=4, sticky='w')
        cbn_deception.grid(row=10, column=3, sticky='w')
        cbn_intimidation.grid(row=10, column=4, sticky='w')
        cbn_performance.grid(row=11, column=3, sticky='w')
        cbn_persuasion.grid(row=11, column=4, sticky='w')
        lbl_senses = tk.Label(master=self.input_frame, text="Senses: ")
        lbl_senses.grid(row=9, column=0, sticky='w')
        self.txt_senses = tk.Text(master=self.input_frame, height=4, width=30)
        self.txt_senses.grid(row=9, column=1, sticky='w')
        lbl_languages = tk.Label(master=self.input_frame, text="Languages: ")
        lbl_languages.grid(row=10, column=0, sticky='w')
        self.txt_languages = tk.Text(master=self.input_frame, height=4, width=30)
        self.txt_languages.grid(row=10, column=1, sticky='w')
        lbl_cr = tk.Label(master=self.input_frame, text="CR: ")
        lbl_cr.grid(row=11, column=0, sticky='w')
        self.ent_cr = tk.Entry(master=self.input_frame, width=20)
        self.ent_cr.grid(row=11, column=1, sticky='w')
        self.ent_cr.insert(0, "1")
        
        lbl_look_ma = tk.Label(master=self.input_frame, text="Combat: ")
        lbl_look_ma.grid(row=1, column=5, sticky='w')
        lbl_abilities = tk.Label(master=self.input_frame, text="Abilities/Features: ")
        lbl_abilities.grid(row=2, column=5, sticky='nw')
        self.txt_abilities = tk.Text(master=self.input_frame, height=6)
        self.txt_abilities.grid(row=2, column=6, rowspan=4, sticky='nw')
        lbl_actions = tk.Label(master=self.input_frame, text="Actions/Legendary Actions: ")
        lbl_actions.grid(row=4, column=5, sticky='nw')
        self.txt_actions = tk.Text(master=self.input_frame, height=6)
        self.txt_actions.grid(row=4, column=6, rowspan=4, sticky='nw')
        lbl_reactions = tk.Label(master=self.input_frame, text="Reactions/Legendary Reactions: ")
        lbl_reactions.grid(row=8, column=5, sticky='nw')
        self.txt_reactions = tk.Text(master=self.input_frame, height=6)
        self.txt_reactions.grid(row=8, column=6, sticky='nw')

        btn_send_it = tk.Button(master=self.send_it_frame, command=self.send_it, text="Send that bitch")
        btn_send_it.grid(row=0, column=0, pady=15)

    def send_it(self):
        get_name = self.ent_name.get()
        get_type = self.ent_type.get()
        get_size = self.size.get()
        get_ac = self.ent_ac.get()
        get_hp_avg = self.ent_hp_avg.get()
        get_hp_num_dice = self.ent_num_hp_dice.get()
        get_hp_die = self.ent_hp_die.get()
        get_speed = self.ent_speed.get()
        get_str = self.ent_str.get()
        get_dex = self.ent_dex.get()
        get_con = self.ent_con.get()
        get_int = self.ent_int.get()
        get_wis = self.ent_wis.get()
        get_cha = self.ent_cha.get()
        get_senses = self.txt_senses.get(1.0, tk.END)
        get_lang = self.txt_languages.get(1.0, tk.END)
        get_cr = self.ent_cr.get()
        get_skill_mod = self.ent_skill_mod.get()
        get_athl = self.athletics.get()
        get_acro = self.acrobatics.get()
        get_slgt = self.sleight_of_hand.get()
        get_stlh = self.stealth.get()
        get_arcn = self.arcana.get()
        get_hist = self.history.get()
        get_invs = self.investigation.get()
        get_natr = self.nature.get()
        get_relg = self.religion.get()
        get_anhn = self.animal_handling.get()
        get_insg = self.insight.get()
        get_medc = self.medicine.get()
        get_perc = self.perception.get()
        get_surv = self.survival.get()
        get_dect = self.deception.get()
        get_intm = self.intimidation.get()
        get_perf = self.performance.get()
        get_pers = self.persuasion.get()
        get_abil = self.txt_abilities.get(1.0, tk.END)
        get_actn = self.txt_actions.get(1.0, tk.END)
        get_reac = self.txt_reactions.get(1.0, tk.END)

        try:
            get_ac = int(get_ac)
            get_hp_avg = int(get_hp_avg)
            get_hp_num_dice = int(get_hp_num_dice)
            get_hp_die = int(get_hp_die)
            get_speed = int(get_speed)
            get_str = int(get_str)
            get_dex = int(get_dex)
            get_con = int(get_con)
            get_int = int(get_int)
            get_wis = int(get_wis)
            get_cha = int(get_cha)
            get_skill_mod = int(get_cha)
        except:
            messagebox.showwarning("Dumbass Alert", "Stop fuckin up and put the shit in right.")
            return
        
        # Temporary jump out to keep from making unnecessary files
        return

        try:
            with open(self.file_loc, 'r') as template_file:
                self.template_info = json.load(template_file)
        except IOError:
            with open(self.file_loc, 'w') as template_file:
                default_loc = {
                    'last_dir': 'C:\\'
                }
                json.dump(default_loc, template_file, indent=4)
            with open(self.file_loc, 'r') as template_file:
                self.template_info = json.load(template_file)

builder = TemplateBuilder(root)
root.mainloop()